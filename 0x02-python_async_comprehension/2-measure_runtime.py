#!/usr/bin/env python3
"""
Measure the runtime of async_comprehension()
"""

import asyncio
import time
from typing import List
from typing import AsyncGenerator


async_generator = __import__('0-async_generator').async_generator


async def async_comprehension() -> List[float]:
    """
    This coroutine will use an async comprehension to collect 10 random
    float values generated by the async_generator coroutine, and return
    them as a list of floats.
    """
    return [x async for x in async_generator()]


async def measure_runtime() -> float:
    """
    Measure the total runtime of async_comprehension() by calling it
    4 times asynchronously and calculating the time it takes to
    complete all 4 calls.
    """
    start_time = time.perf_counter()
    tasks = [async_comprehension() for i in range(4)]
    await asyncio.gather(*tasks)
    end_time = time.perf_counter()
    total_runtime = end_time - start_time
    return total_runtime
